/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Lottery {
  export type OrderStruct = {
    player: PromiseOrValue<string>;
    number: PromiseOrValue<string>;
    amounts: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [string, string, BigNumber] & {
    player: string;
    number: string;
    amounts: BigNumber;
  };

  export type ActivityStruct = {
    round: PromiseOrValue<BigNumberish>;
    poolBalance: PromiseOrValue<BigNumberish>;
    totalAmounts: PromiseOrValue<BigNumberish>;
    time: PromiseOrValue<BigNumberish>;
    number: PromiseOrValue<string>;
    state: PromiseOrValue<BigNumberish>;
    isAlreadyDistributed: PromiseOrValue<boolean>;
    participantRecord: Lottery.OrderStruct[];
  };

  export type ActivityStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    boolean,
    Lottery.OrderStructOutput[]
  ] & {
    round: BigNumber;
    poolBalance: BigNumber;
    totalAmounts: BigNumber;
    time: BigNumber;
    number: string;
    state: number;
    isAlreadyDistributed: boolean;
    participantRecord: Lottery.OrderStructOutput[];
  };
}

export interface LotteryInterface extends utils.Interface {
  functions: {
    "VRF()": FunctionFragment;
    "admin()": FunctionFragment;
    "buy(string,uint256)": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "closeDraw()": FunctionFragment;
    "drawPrize()": FunctionFragment;
    "instantiateVRF(uint64)": FunctionFragment;
    "queryActivityInfo()": FunctionFragment;
    "queryPrizeHistory(uint256)": FunctionFragment;
    "startActivity(uint256,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VRF"
      | "admin"
      | "buy"
      | "changeAdmin"
      | "closeDraw"
      | "drawPrize"
      | "instantiateVRF"
      | "queryActivityInfo"
      | "queryPrizeHistory"
      | "startActivity"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VRF", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "closeDraw", values?: undefined): string;
  encodeFunctionData(functionFragment: "drawPrize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "instantiateVRF",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "queryActivityInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryPrizeHistory",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startActivity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "VRF", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeDraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drawPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "instantiateVRF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryActivityInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryPrizeHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startActivity",
    data: BytesLike
  ): Result;

  events: {
    "Buy(address,string,uint256)": EventFragment;
    "DrawPrize(uint256,string,address[])": EventFragment;
    "Start(uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DrawPrize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Start"): EventFragment;
}

export interface BuyEventObject {
  player: string;
  number: string;
  amounts: BigNumber;
}
export type BuyEvent = TypedEvent<[string, string, BigNumber], BuyEventObject>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export interface DrawPrizeEventObject {
  round: BigNumber;
  number: string;
  winners: string[];
}
export type DrawPrizeEvent = TypedEvent<
  [BigNumber, string, string[]],
  DrawPrizeEventObject
>;

export type DrawPrizeEventFilter = TypedEventFilter<DrawPrizeEvent>;

export interface StartEventObject {
  time: BigNumber;
  unit: string;
}
export type StartEvent = TypedEvent<[BigNumber, string], StartEventObject>;

export type StartEventFilter = TypedEventFilter<StartEvent>;

export interface Lottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LotteryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VRF(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    buy(
      number: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drawPrize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    instantiateVRF(
      subscriptionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    queryActivityInfo(
      overrides?: CallOverrides
    ): Promise<[Lottery.ActivityStructOutput]>;

    queryPrizeHistory(
      round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string[]] & { number: string; winners: string[] }>;

    startActivity(
      time: PromiseOrValue<BigNumberish>,
      unit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  VRF(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  buy(
    number: PromiseOrValue<string>,
    amounts: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeAdmin(
    _newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeDraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drawPrize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  instantiateVRF(
    subscriptionID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  queryActivityInfo(
    overrides?: CallOverrides
  ): Promise<Lottery.ActivityStructOutput>;

  queryPrizeHistory(
    round: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, string[]] & { number: string; winners: string[] }>;

  startActivity(
    time: PromiseOrValue<BigNumberish>,
    unit: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    VRF(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    buy(
      number: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeDraw(overrides?: CallOverrides): Promise<void>;

    drawPrize(overrides?: CallOverrides): Promise<boolean>;

    instantiateVRF(
      subscriptionID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    queryActivityInfo(
      overrides?: CallOverrides
    ): Promise<Lottery.ActivityStructOutput>;

    queryPrizeHistory(
      round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, string[]] & { number: string; winners: string[] }>;

    startActivity(
      time: PromiseOrValue<BigNumberish>,
      unit: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Buy(address,string,uint256)"(
      player?: null,
      number?: null,
      amounts?: null
    ): BuyEventFilter;
    Buy(player?: null, number?: null, amounts?: null): BuyEventFilter;

    "DrawPrize(uint256,string,address[])"(
      round?: null,
      number?: PromiseOrValue<string> | null,
      winners?: PromiseOrValue<string>[] | null
    ): DrawPrizeEventFilter;
    DrawPrize(
      round?: null,
      number?: PromiseOrValue<string> | null,
      winners?: PromiseOrValue<string>[] | null
    ): DrawPrizeEventFilter;

    "Start(uint256,string)"(time?: null, unit?: null): StartEventFilter;
    Start(time?: null, unit?: null): StartEventFilter;
  };

  estimateGas: {
    VRF(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      number: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drawPrize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    instantiateVRF(
      subscriptionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    queryActivityInfo(overrides?: CallOverrides): Promise<BigNumber>;

    queryPrizeHistory(
      round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startActivity(
      time: PromiseOrValue<BigNumberish>,
      unit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VRF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      number: PromiseOrValue<string>,
      amounts: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      _newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeDraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drawPrize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    instantiateVRF(
      subscriptionID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    queryActivityInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryPrizeHistory(
      round: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startActivity(
      time: PromiseOrValue<BigNumberish>,
      unit: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
